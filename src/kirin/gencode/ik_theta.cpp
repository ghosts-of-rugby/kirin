//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// ik_theta.cpp
//
// Code generation for function 'ik_theta'
//

// Include files
#include "ik_theta.h"
#include "ik_r_rtwutil.h"
#include "rt_nonfinite.h"
#include <cmath>

// Function Definitions
namespace model {
void ik_theta(double l, double p0, double x0, double b_y0, double out1[2])
{
  double t2;
  double t22;
  double t5;
  double t8;
  double t9;
  double t9_tmp;
  // IK_THETA
  //     OUT1 = IK_THETA(L,P0,X0,Y0)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     04-Sep-2022 21:54:38
  t2 = std::cos(p0);
  t5 = x0 * 2.0;
  t8 = l * std::sin(p0);
  t9_tmp = l * t2;
  t9 = t9_tmp * 2.0;
  t22 = std::sqrt(1.0 / rt_powd_snf(std::cos(p0 / 2.0), 4.0) *
                  ((((l * l + x0 * x0) + b_y0 * b_y0) + t9_tmp * x0 * -2.0) +
                   -(t8 * b_y0 * 2.0)));
  t2 *= t22;
  t9_tmp = t8 - b_y0;
  out1[0] = std::atan((((t5 - t9) + t22) + t2) * -0.5 / t9_tmp) * -2.0;
  out1[1] = std::atan((((-t5 + t9) + t22) + t2) * -0.5 / t9_tmp) * 2.0;
}

} // namespace model

// End of code generation (ik_theta.cpp)
